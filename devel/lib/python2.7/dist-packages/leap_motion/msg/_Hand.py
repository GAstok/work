# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from leap_motion/Hand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import leap_motion.msg
import geometry_msgs.msg
import std_msgs.msg

class Hand(genpy.Message):
  _md5sum = "acb25b682923782ccfb65adca40c2540"
  _type = "leap_motion/Hand"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# A unique ID assigned to this Hand object
int32 lmc_hand_id

# This changed to between true/false depending if there's a hand detected in the LMC frame
bool is_present

# This changed to between true/false depending if there's a hand detected in the LMC frame
bool valid_gestures

# The duration of time this Hand has been visible to the Leap Motion Controller. 
float32 time_visible

# How confident we are with a given hand pose. 
# The confidence level ranges between 0.0 and 1.0 inclusive.
float32 confidence

# The following three angles are in radians!
float32 roll
float32 pitch
float32 yaw

# The angle between the fingers and the hand of a grab hand pose. 
# In radians
float32 grab_strength

# The distance between the thumb and index finger of a pinch hand pose. 
float32 pinch_strength

# The rate of change of the palm position in meters/second. 
float32[] palm_velocity

# The center position of the palm in millimeters from the Leap Motion Controller origin. 
geometry_msgs/Point palm_center

# The estimated width of the palm when the hand is in a flat position. 
float32 palm_width

# The radius (m) of a sphere fit to the curvature of this hand. 
float32 sphere_radius

# The center of a sphere fit to the curvature of this hand. 
float32[] sphere_center

# The position of the wrist of this hand. 
float32[] wrist_position

# A string containing a brief, human readable description of the Hand object. 
string to_string 

# A list of fingers and gestures assosciated with this hand
Finger[] finger_list
Gesture[] gesture_list
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: leap_motion/Finger
std_msgs/Header header

# A unique id given to this finger
int32 lmc_finger_id

# The name of this finger. 
uint8 type

# The estimated length of the finger in meters. 
float32 length

# The estimated width of the finger in meters.
float32 width

# A string containing a brief, human readable description of the Finger object. 
string to_string

# List of bones associated with this finger
Bone[] bone_list
================================================================================
MSG: leap_motion/Bone
std_msgs/Header header

# The name of this bone. 
uint8 type

# The estimated length of the bone in meters.
float32 length

# The estimated with of the bone in meters.
float32 width

# A string containing a brief, human readable description of the Bone object. 
string to_string

# The base of the bone, closest to the wrist. 
geometry_msgs/Pose bone_start

# The end of the bone, closest to the finger tip. 
geometry_msgs/Pose bone_end

# The midpoint of the bone. 
float32[] center

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: leap_motion/Gesture
# A unique id given to this gesture
int32 lmc_gesture_id

# Reports whether this Gesture instance represents a valid Gesture. 
bool is_valid

# The elapsed duration of the recognized movement up to the frame containing this 
# Gesture object, in microseconds. 
int64 duration_us

# The elapsed duration in seconds.
float32 duration_s

# Recognized movements occur over time and have a beginning, a middle, and an end. 
# The 'state' attribute reports where in that sequence this Gesture object falls.
int32 gesture_state
### STATE_INVALID == -1
### STATE_START == 1
### STATE_UPDATE == 2
### STATE_STOP == 3

# The supported types of gestures. 
int32 gesture_type
### TYPE_INVALID == -1
### TYPE_SWIPE == 1
### TYPE_CIRCLE == 4
### TYPE_SCREEN_TAP == 5
### TYPE_KEY_TAP == 6

# A string containing a brief, human-readable description of this Gesture. 
string to_string

# The list of fingers, tools ids associated with this Gesture, if any. 
int32[] pointable_ids

"""
  __slots__ = ['header','lmc_hand_id','is_present','valid_gestures','time_visible','confidence','roll','pitch','yaw','grab_strength','pinch_strength','palm_velocity','palm_center','palm_width','sphere_radius','sphere_center','wrist_position','to_string','finger_list','gesture_list']
  _slot_types = ['std_msgs/Header','int32','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32[]','geometry_msgs/Point','float32','float32','float32[]','float32[]','string','leap_motion/Finger[]','leap_motion/Gesture[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lmc_hand_id,is_present,valid_gestures,time_visible,confidence,roll,pitch,yaw,grab_strength,pinch_strength,palm_velocity,palm_center,palm_width,sphere_radius,sphere_center,wrist_position,to_string,finger_list,gesture_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lmc_hand_id is None:
        self.lmc_hand_id = 0
      if self.is_present is None:
        self.is_present = False
      if self.valid_gestures is None:
        self.valid_gestures = False
      if self.time_visible is None:
        self.time_visible = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.grab_strength is None:
        self.grab_strength = 0.
      if self.pinch_strength is None:
        self.pinch_strength = 0.
      if self.palm_velocity is None:
        self.palm_velocity = []
      if self.palm_center is None:
        self.palm_center = geometry_msgs.msg.Point()
      if self.palm_width is None:
        self.palm_width = 0.
      if self.sphere_radius is None:
        self.sphere_radius = 0.
      if self.sphere_center is None:
        self.sphere_center = []
      if self.wrist_position is None:
        self.wrist_position = []
      if self.to_string is None:
        self.to_string = ''
      if self.finger_list is None:
        self.finger_list = []
      if self.gesture_list is None:
        self.gesture_list = []
    else:
      self.header = std_msgs.msg.Header()
      self.lmc_hand_id = 0
      self.is_present = False
      self.valid_gestures = False
      self.time_visible = 0.
      self.confidence = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.grab_strength = 0.
      self.pinch_strength = 0.
      self.palm_velocity = []
      self.palm_center = geometry_msgs.msg.Point()
      self.palm_width = 0.
      self.sphere_radius = 0.
      self.sphere_center = []
      self.wrist_position = []
      self.to_string = ''
      self.finger_list = []
      self.gesture_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i2B7f().pack(_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength))
      length = len(self.palm_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.palm_velocity))
      _x = self
      buff.write(_get_struct_3d2f().pack(_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius))
      length = len(self.sphere_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sphere_center))
      length = len(self.wrist_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.wrist_position))
      _x = self.to_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.finger_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.finger_list:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_iB2f().pack(_x.lmc_finger_id, _x.type, _x.length, _x.width))
        _x = val1.to_string
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.bone_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bone_list:
          _v3 = val2.header
          buff.write(_get_struct_I().pack(_v3.seq))
          _v4 = _v3.stamp
          _x = _v4
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v3.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_B2f().pack(_x.type, _x.length, _x.width))
          _x = val2.to_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v5 = val2.bone_start
          _v6 = _v5.position
          _x = _v6
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v7 = _v5.orientation
          _x = _v7
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v8 = val2.bone_end
          _v9 = _v8.position
          _x = _v9
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v10 = _v8.orientation
          _x = _v10
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val2.center)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.pack(pattern, *val2.center))
      length = len(self.gesture_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.gesture_list:
        _x = val1
        buff.write(_get_struct_iBqf2i().pack(_x.lmc_gesture_id, _x.is_valid, _x.duration_us, _x.duration_s, _x.gesture_state, _x.gesture_type))
        _x = val1.to_string
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.pointable_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *val1.pointable_ids))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.palm_center is None:
        self.palm_center = geometry_msgs.msg.Point()
      if self.finger_list is None:
        self.finger_list = None
      if self.gesture_list is None:
        self.gesture_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength,) = _get_struct_i2B7f().unpack(str[start:end])
      self.is_present = bool(self.is_present)
      self.valid_gestures = bool(self.valid_gestures)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.palm_velocity = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 32
      (_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius,) = _get_struct_3d2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sphere_center = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrist_position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_string = str[start:end].decode('utf-8')
      else:
        self.to_string = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.finger_list = []
      for i in range(0, length):
        val1 = leap_motion.msg.Finger()
        _v11 = val1.header
        start = end
        end += 4
        (_v11.seq,) = _get_struct_I().unpack(str[start:end])
        _v12 = _v11.stamp
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.frame_id = str[start:end].decode('utf-8')
        else:
          _v11.frame_id = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.lmc_finger_id, _x.type, _x.length, _x.width,) = _get_struct_iB2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.to_string = str[start:end].decode('utf-8')
        else:
          val1.to_string = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bone_list = []
        for i in range(0, length):
          val2 = leap_motion.msg.Bone()
          _v13 = val2.header
          start = end
          end += 4
          (_v13.seq,) = _get_struct_I().unpack(str[start:end])
          _v14 = _v13.stamp
          _x = _v14
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v13.frame_id = str[start:end].decode('utf-8')
          else:
            _v13.frame_id = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.type, _x.length, _x.width,) = _get_struct_B2f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.to_string = str[start:end].decode('utf-8')
          else:
            val2.to_string = str[start:end]
          _v15 = val2.bone_start
          _v16 = _v15.position
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v17 = _v15.orientation
          _x = _v17
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v18 = val2.bone_end
          _v19 = _v18.position
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v20 = _v18.orientation
          _x = _v20
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.center = struct.unpack(pattern, str[start:end])
          val1.bone_list.append(val2)
        self.finger_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gesture_list = []
      for i in range(0, length):
        val1 = leap_motion.msg.Gesture()
        _x = val1
        start = end
        end += 25
        (_x.lmc_gesture_id, _x.is_valid, _x.duration_us, _x.duration_s, _x.gesture_state, _x.gesture_type,) = _get_struct_iBqf2i().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.to_string = str[start:end].decode('utf-8')
        else:
          val1.to_string = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pointable_ids = struct.unpack(pattern, str[start:end])
        self.gesture_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i2B7f().pack(_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength))
      length = len(self.palm_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.palm_velocity.tostring())
      _x = self
      buff.write(_get_struct_3d2f().pack(_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius))
      length = len(self.sphere_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sphere_center.tostring())
      length = len(self.wrist_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.wrist_position.tostring())
      _x = self.to_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.finger_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.finger_list:
        _v21 = val1.header
        buff.write(_get_struct_I().pack(_v21.seq))
        _v22 = _v21.stamp
        _x = _v22
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v21.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_iB2f().pack(_x.lmc_finger_id, _x.type, _x.length, _x.width))
        _x = val1.to_string
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.bone_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bone_list:
          _v23 = val2.header
          buff.write(_get_struct_I().pack(_v23.seq))
          _v24 = _v23.stamp
          _x = _v24
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v23.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_B2f().pack(_x.type, _x.length, _x.width))
          _x = val2.to_string
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v25 = val2.bone_start
          _v26 = _v25.position
          _x = _v26
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v27 = _v25.orientation
          _x = _v27
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v28 = val2.bone_end
          _v29 = _v28.position
          _x = _v29
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v30 = _v28.orientation
          _x = _v30
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val2.center)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.center.tostring())
      length = len(self.gesture_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.gesture_list:
        _x = val1
        buff.write(_get_struct_iBqf2i().pack(_x.lmc_gesture_id, _x.is_valid, _x.duration_us, _x.duration_s, _x.gesture_state, _x.gesture_type))
        _x = val1.to_string
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.pointable_ids)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.pointable_ids.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.palm_center is None:
        self.palm_center = geometry_msgs.msg.Point()
      if self.finger_list is None:
        self.finger_list = None
      if self.gesture_list is None:
        self.gesture_list = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.lmc_hand_id, _x.is_present, _x.valid_gestures, _x.time_visible, _x.confidence, _x.roll, _x.pitch, _x.yaw, _x.grab_strength, _x.pinch_strength,) = _get_struct_i2B7f().unpack(str[start:end])
      self.is_present = bool(self.is_present)
      self.valid_gestures = bool(self.valid_gestures)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.palm_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 32
      (_x.palm_center.x, _x.palm_center.y, _x.palm_center.z, _x.palm_width, _x.sphere_radius,) = _get_struct_3d2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sphere_center = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.wrist_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.to_string = str[start:end].decode('utf-8')
      else:
        self.to_string = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.finger_list = []
      for i in range(0, length):
        val1 = leap_motion.msg.Finger()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8')
        else:
          _v31.frame_id = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.lmc_finger_id, _x.type, _x.length, _x.width,) = _get_struct_iB2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.to_string = str[start:end].decode('utf-8')
        else:
          val1.to_string = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bone_list = []
        for i in range(0, length):
          val2 = leap_motion.msg.Bone()
          _v33 = val2.header
          start = end
          end += 4
          (_v33.seq,) = _get_struct_I().unpack(str[start:end])
          _v34 = _v33.stamp
          _x = _v34
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v33.frame_id = str[start:end].decode('utf-8')
          else:
            _v33.frame_id = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.type, _x.length, _x.width,) = _get_struct_B2f().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.to_string = str[start:end].decode('utf-8')
          else:
            val2.to_string = str[start:end]
          _v35 = val2.bone_start
          _v36 = _v35.position
          _x = _v36
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v37 = _v35.orientation
          _x = _v37
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v38 = val2.bone_end
          _v39 = _v38.position
          _x = _v39
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v40 = _v38.orientation
          _x = _v40
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          end += struct.calcsize(pattern)
          val2.center = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.bone_list.append(val2)
        self.finger_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gesture_list = []
      for i in range(0, length):
        val1 = leap_motion.msg.Gesture()
        _x = val1
        start = end
        end += 25
        (_x.lmc_gesture_id, _x.is_valid, _x.duration_us, _x.duration_s, _x.gesture_state, _x.gesture_type,) = _get_struct_iBqf2i().unpack(str[start:end])
        val1.is_valid = bool(val1.is_valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.to_string = str[start:end].decode('utf-8')
        else:
          val1.to_string = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pointable_ids = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        self.gesture_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB2f = None
def _get_struct_iB2f():
    global _struct_iB2f
    if _struct_iB2f is None:
        _struct_iB2f = struct.Struct("<iB2f")
    return _struct_iB2f
_struct_3d2f = None
def _get_struct_3d2f():
    global _struct_3d2f
    if _struct_3d2f is None:
        _struct_3d2f = struct.Struct("<3d2f")
    return _struct_3d2f
_struct_iBqf2i = None
def _get_struct_iBqf2i():
    global _struct_iBqf2i
    if _struct_iBqf2i is None:
        _struct_iBqf2i = struct.Struct("<iBqf2i")
    return _struct_iBqf2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i2B7f = None
def _get_struct_i2B7f():
    global _struct_i2B7f
    if _struct_i2B7f is None:
        _struct_i2B7f = struct.Struct("<i2B7f")
    return _struct_i2B7f
_struct_B2f = None
def _get_struct_B2f():
    global _struct_B2f
    if _struct_B2f is None:
        _struct_B2f = struct.Struct("<B2f")
    return _struct_B2f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
